# Elite C64 disassembly / Elite : Harmless, cc-by-nc-sa 2018-2022,
# see LICENSE.txt. "Elite" is copyright / trademark David Braben & Ian Bell,
# All Rights Reserved. <github.com/Kroc/elite-harmless>
#===============================================================================
#
# this file describes the memory layout of Elite : Harmless for an "Ocean"-type
# cartridge ROM. cartridges released by Ocean contained up to 512 KB ROM using
# a bank-switching scheme (as the C64 only allows mapping 16 KB ROM max.)
# the 512 KB cart uses a different banking sceheme than the other sizes,
# so we are opting for a 256 KB cart until such a time more space is needed
# 
# because the Ocean cart format was used during the C64's commercial lifetime,
# support in emulators is very broad and you shouldn't have issues running
# Elite on C64 emulators even going as far back as the '90s
#
# Ocean cartridges have no on-cart SRAM or rewritable memory so game saves
# still have to go to tape (if enabled), or disk
#
# details of the Ocean cartridge and ".crt" file-format taken from the VICE
# documentation: <http://vice-emu.sourceforge.net/vice_16.html#SEC339>

SYMBOLS {
    ELITE_BITMAP_ADDR:      type = export,  value = __VIC_BITMAP_RUN__;
    ELITE_MENUSCR_ADDR:     type = export,  value = __VIC_SCR_MENU_RUN__;
    ELITE_MAINSCR_ADDR:     type = export,  value = __VIC_SCR_MAIN_RUN__;
    #ELITE_SPRITES_ADDR:     type = export,  value = __GFX_SPRITES_RUN__;
    #ELITE_FONT_ADDR:        type = export,  value = __GFX_FONT_RUN__;
    ELITE_ZP_SHADOW:        type = export,  value = __ZP_SHADOW_RUN__;
    ELITE_DISK_BUFFER:      type = export,  value = __DISK_BUFFER_RUN__;
}

MEMORY {
    # the layout of segments consists of two sets of memory maps; the first,
    # where the code/data goes when the game is running, and an entirely
    # different layout for where that code/data goes in the cartridge-ROM 

    # C64 layout:
    #===========================================================================
    # this is only used to assign addresses for run-time, nothing is actually
    # written to disk for this layout
    #
    C64_RAM:        file = "",
                    start = $0400,  size = $FFBA - $0400;

    # ROM layout:
    #===========================================================================
    # the binary contents of a cartridge are not alone enough to emulate a C64
    # cartridge due to the variety of cartridge hardware in use for the C64.
    # a specialsed file-format was developed to describe the cartridge hardware
    # so that emulators would know how to map the binary contents. this format
    # is so universally supported that in a twist of irony, modern flash-carts
    # like the EasyFlash3 support burning these emulator files to ROM
    #
    # the file format is documented in the VICE manual, here:
    # <http://vice-emu.sourceforge.net/vice_16.html#SEC330>
    # 
    # the file header is used to describe the overall cart hardware
    # and mapping scheme. it doesn't use any addresses
    CART_HEAD:      file = "%O", start = $0000, size = $40;

    # the cartridge ROM banks (and CHIP headers)
    #---------------------------------------------------------------------------
    CART_CHIP_00:   file = "%O", start = $8000, size = $0010, bank = 0;
    CART_BANK_00:   file = "%O", start = $8000, size = $2000, bank = 0,  # 8K
                    fill = yes,  fillval = $FF, define = yes;
    CART_CHIP_01:   file = "%O", start = $8000, size = $0010, bank = 1;
    CART_BANK_01:   file = "%O", start = $8000, size = $2000, bank = 1,  # 16K
                    fill = yes,  fillval = $FF, define = yes;
    CART_CHIP_02:   file = "%O", start = $8000, size = $0010, bank = 2;
    CART_BANK_02:   file = "%O", start = $8000, size = $2000, bank = 2,  # 24K
                    fill = yes,  fillval = $FF, define = yes;
    CART_CHIP_03:   file = "%O", start = $8000, size = $0010, bank = 3;
    CART_BANK_03:   file = "%O", start = $8000, size = $2000, bank = 3,  # 32K
                    fill = yes,  fillval = $FF, define = yes;
    CART_CHIP_04:   file = "%O", start = $8000, size = $0010, bank = 4;
    CART_BANK_04:   file = "%O", start = $8000, size = $2000, bank = 4,  # 40K
                    fill = yes,  fillval = $FF, define = yes;
    CART_CHIP_05:   file = "%O", start = $8000, size = $0010, bank = 5;
    CART_BANK_05:   file = "%O", start = $8000, size = $2000, bank = 5,  # 48K
                    fill = yes,  fillval = $FF, define = yes;
    CART_CHIP_06:   file = "%O", start = $8000, size = $0010, bank = 6;
    CART_BANK_06:   file = "%O", start = $8000, size = $2000, bank = 6,  # 56K
                    fill = yes,  fillval = $FF, define = yes;
    CART_CHIP_07:   file = "%O", start = $8000, size = $0010, bank = 7;
    CART_BANK_07:   file = "%O", start = $8000, size = $2000, bank = 7,  # 64K
                    fill = yes,  fillval = $FF, define = yes;
    CART_CHIP_08:   file = "%O", start = $8000, size = $0010, bank = 8;
    CART_BANK_08:   file = "%O", start = $8000, size = $2000, bank = 8,  # 72K
                    fill = yes,  fillval = $FF, define = yes;
    CART_CHIP_09:   file = "%O", start = $8000, size = $0010, bank = 9;
    CART_BANK_09:   file = "%O", start = $8000, size = $2000, bank = 9,  # 80K
                    fill = yes,  fillval = $FF, define = yes;
    CART_CHIP_10:   file = "%O", start = $8000, size = $0010, bank = 10;
    CART_BANK_10:   file = "%O", start = $8000, size = $2000, bank = 10, # 88K
                    fill = yes,  fillval = $FF, define = yes;
    CART_CHIP_11:   file = "%O", start = $8000, size = $0010, bank = 11;
    CART_BANK_11:   file = "%O", start = $8000, size = $2000, bank = 11, # 96K
                    fill = yes,  fillval = $FF, define = yes;
    CART_CHIP_12:   file = "%O", start = $8000, size = $0010, bank = 12;
    CART_BANK_12:   file = "%O", start = $8000, size = $2000, bank = 12, # 104K
                    fill = yes,  fillval = $FF, define = yes;
    CART_CHIP_13:   file = "%O", start = $8000, size = $0010, bank = 13;
    CART_BANK_13:   file = "%O", start = $8000, size = $2000, bank = 13, # 112K
                    fill = yes,  fillval = $FF, define = yes;
    CART_CHIP_14:   file = "%O", start = $8000, size = $0010, bank = 14;
    CART_BANK_14:   file = "%O", start = $8000, size = $2000, bank = 14, # 120K
                    fill = yes,  fillval = $FF, define = yes;
    CART_CHIP_15:   file = "%O", start = $8000, size = $0010, bank = 15;
    CART_BANK_15:   file = "%O", start = $8000, size = $2000, bank = 15, # 128K
                    fill = yes,  fillval = $FF, define = yes;
    #---------------------------------------------------------------------------
    CART_CHIP_16:   file = "%O", start = $A000, size = $0010, bank = 16;
    CART_BANK_16:   file = "%O", start = $A000, size = $2000, bank = 16, # 136K
                    fill = yes,  fillval = $FF, define = yes;
    CART_CHIP_17:   file = "%O", start = $A000, size = $0010, bank = 17;
    CART_BANK_17:   file = "%O", start = $A000, size = $2000, bank = 17, # 144K
                    fill = yes,  fillval = $FF, define = yes;
    CART_CHIP_18:   file = "%O", start = $A000, size = $0010, bank = 18;
    CART_BANK_18:   file = "%O", start = $A000, size = $2000, bank = 18, # 152K
                    fill = yes,  fillval = $FF, define = yes;
    CART_CHIP_19:   file = "%O", start = $A000, size = $0010, bank = 19;
    CART_BANK_19:   file = "%O", start = $A000, size = $2000, bank = 19, # 160K
                    fill = yes,  fillval = $FF, define = yes;
    CART_CHIP_20:   file = "%O", start = $A000, size = $0010, bank = 20;
    CART_BANK_20:   file = "%O", start = $A000, size = $2000, bank = 20, # 168K
                    fill = yes,  fillval = $FF, define = yes;
    CART_CHIP_21:   file = "%O", start = $A000, size = $0010, bank = 21;
    CART_BANK_21:   file = "%O", start = $A000, size = $2000, bank = 21, # 176K
                    fill = yes,  fillval = $FF, define = yes;
    CART_CHIP_22:   file = "%O", start = $A000, size = $0010, bank = 22;
    CART_BANK_22:   file = "%O", start = $A000, size = $2000, bank = 22, # 184K
                    fill = yes,  fillval = $FF, define = yes;
    CART_CHIP_23:   file = "%O", start = $A000, size = $0010, bank = 23;
    CART_BANK_23:   file = "%O", start = $A000, size = $2000, bank = 23, # 192K
                    fill = yes,  fillval = $FF, define = yes;
    CART_CHIP_24:   file = "%O", start = $A000, size = $0010, bank = 24;
    CART_BANK_24:   file = "%O", start = $A000, size = $2000, bank = 24, # 200K
                    fill = yes,  fillval = $FF, define = yes;
    CART_CHIP_25:   file = "%O", start = $A000, size = $0010, bank = 25;
    CART_BANK_25:   file = "%O", start = $A000, size = $2000, bank = 25, # 208K
                    fill = yes,  fillval = $FF, define = yes;
    CART_CHIP_26:   file = "%O", start = $A000, size = $0010, bank = 26;
    CART_BANK_26:   file = "%O", start = $A000, size = $2000, bank = 26, # 216K
                    fill = yes,  fillval = $FF, define = yes;
    CART_CHIP_27:   file = "%O", start = $A000, size = $0010, bank = 27;
    CART_BANK_27:   file = "%O", start = $A000, size = $2000, bank = 27, # 224K
                    fill = yes,  fillval = $FF, define = yes;
    CART_CHIP_28:   file = "%O", start = $A000, size = $0010, bank = 28;
    CART_BANK_28:   file = "%O", start = $A000, size = $2000, bank = 28, # 232K
                    fill = yes,  fillval = $FF, define = yes;
    CART_CHIP_29:   file = "%O", start = $A000, size = $0010, bank = 29;
    CART_BANK_29:   file = "%O", start = $A000, size = $2000, bank = 29, # 240K
                    fill = yes,  fillval = $FF, define = yes;
    CART_CHIP_30:   file = "%O", start = $A000, size = $0010, bank = 30;
    CART_BANK_30:   file = "%O", start = $A000, size = $2000, bank = 30, # 248K
                    fill = yes,  fillval = $FF, define = yes;
    CART_CHIP_31:   file = "%O", start = $A000, size = $0010, bank = 31;
    CART_BANK_31:   file = "%O", start = $A000, size = $2000, bank = 31, # 256K
                    fill = yes,  fillval = $FF, define = yes;
    #---------------------------------------------------------------------------
}

SEGMENTS {
    #===========================================================================
    
    # working variable space (not written to disk)
    VARS_MAIN:      type = bss, load = C64_RAM, define = yes;

    # the bitmap can be placed in either the lower or upper half of the VIC
    # bank (it's 8K) and the character set can be placed at any 2 K offset.
    
    # the source code will use the address assigned by this segment placement,
    # it's not defined anywhere in the source code!
    VIC_BITMAP:     type = bss, load = C64_RAM, align = $2000,  define = yes;
    
    # elite uses two 'text' screens (although they hold colour information
    # when used with the bitmap), one for the "main view" (cockpit) and
    # another for the "menu view", the menu screens that hide the HUD
    VIC_SCR_MENU:   type = bss, load = C64_RAM, align = $0400,  define = yes;
    VIC_SCR_MAIN:   type = bss, load = C64_RAM, align = $0400,  define = yes;

    ZP_SHADOW:      type = bss,
                    load = C64_RAM, align = 256,    define = yes;
    DISK_BUFFER:    type = bss,
                    load = C64_RAM, align = 256,    define = yes;
    
    # cartridge contents:
    #===========================================================================
    CART_HEAD:      load = CART_HEAD;

    # BANK 0
    #---------------------------------------------------------------------------
    CART_CHIP_00:   load = CART_CHIP_00;
    
    CODE_INIT:      load = CART_BANK_00;

    # BANK 1
    #---------------------------------------------------------------------------
    CART_CHIP_01:   load = CART_CHIP_01;

    # BANK 2
    #---------------------------------------------------------------------------
    CART_CHIP_02:   load = CART_CHIP_02;

    # BANK 3
    #---------------------------------------------------------------------------
    CART_CHIP_03:   load = CART_CHIP_03;
    
    # BANK 4
    #---------------------------------------------------------------------------
    CART_CHIP_04:   load = CART_CHIP_04;

    # BANK 5
    #---------------------------------------------------------------------------
    CART_CHIP_05:   load = CART_CHIP_05;

    # BANK 6
    #---------------------------------------------------------------------------
    CART_CHIP_06:   load = CART_CHIP_06;

    # BANK 7
    #---------------------------------------------------------------------------
    CART_CHIP_07:   load = CART_CHIP_07;

    # BANK 8
    #---------------------------------------------------------------------------
    CART_CHIP_08:   load = CART_CHIP_08;

    # BANK 9
    #---------------------------------------------------------------------------
    CART_CHIP_09:   load = CART_CHIP_09;

    # BANK 10
    #---------------------------------------------------------------------------
    CART_CHIP_10:   load = CART_CHIP_10;

    # BANK 11
    #---------------------------------------------------------------------------
    CART_CHIP_11:   load = CART_CHIP_11;

    # BANK 12
    #---------------------------------------------------------------------------
    CART_CHIP_12:   load = CART_CHIP_12;
    
    # BANK 13
    #---------------------------------------------------------------------------
    CART_CHIP_13:   load = CART_CHIP_13;
    
    # BANK 14
    #---------------------------------------------------------------------------
    CART_CHIP_14:   load = CART_CHIP_14;

    # BANK 15
    #---------------------------------------------------------------------------
    CART_CHIP_15:   load = CART_CHIP_15;
    
    # BANK 16
    #---------------------------------------------------------------------------
    CART_CHIP_16:   load = CART_CHIP_16;
    
    # BANK 17
    #---------------------------------------------------------------------------
    CART_CHIP_17:   load = CART_CHIP_17;
    
    # BANK 18
    #---------------------------------------------------------------------------
    CART_CHIP_18:   load = CART_CHIP_18;
    
    # BANK 19
    #---------------------------------------------------------------------------
    CART_CHIP_19:   load = CART_CHIP_19;
    
    # BANK 20
    #---------------------------------------------------------------------------
    CART_CHIP_20:   load = CART_CHIP_20;
    
    # BANK 21
    #---------------------------------------------------------------------------
    CART_CHIP_21:   load = CART_CHIP_21;
    
    # BANK 22
    #---------------------------------------------------------------------------
    CART_CHIP_22:   load = CART_CHIP_22;
    
    # BANK 23
    #---------------------------------------------------------------------------
    CART_CHIP_23:   load = CART_CHIP_23;
    
    # BANK 24
    #---------------------------------------------------------------------------
    CART_CHIP_24:   load = CART_CHIP_24;
    
    # BANK 25
    #---------------------------------------------------------------------------
    CART_CHIP_25:   load = CART_CHIP_25;
    
    # BANK 26
    #---------------------------------------------------------------------------
    CART_CHIP_26:   load = CART_CHIP_26;
    
    # BANK 27
    #---------------------------------------------------------------------------
    CART_CHIP_27:   load = CART_CHIP_27;
    
    # BANK 28
    #---------------------------------------------------------------------------
    CART_CHIP_28:   load = CART_CHIP_28;
    
    # BANK 29
    #---------------------------------------------------------------------------
    CART_CHIP_29:   load = CART_CHIP_29;
    
    # BANK 30
    #---------------------------------------------------------------------------
    CART_CHIP_30:   load = CART_CHIP_30;
    
    # BANK 31
    #---------------------------------------------------------------------------
    CART_CHIP_31:   load = CART_CHIP_31;
    
#    
#    GFX_FONT:       load = PRG1,    align_load = 256,
#                    run  = C64_RAM, align      = 256,   define = yes;
#    
#    TEXT_FLIGHT:    load = PRG1,    run = C64_RAM;
#    TEXT_DOCKED:    load = PRG1,    run = C64_RAM,  define = yes;
#    VARS_FLAGS:     load = PRG1,    run = C64_RAM;
#    CODE_1D81:      load = PRG1,    run = C64_RAM;
#    TEXT_TOKENS:    load = PRG1,    run = C64_RAM;
#    TEXT_PAIRS:     load = PRG1,    run = C64_RAM;
#    SAVE_DATA:      load = PRG1,    run = C64_RAM;
#    SAVE_DEFAULT:   load = PRG1,    run = C64_RAM;
#    CIRCLE_LINES:   load = PRG1,    run = C64_RAM;
#    CODE_28A4:      load = PRG1,    run = C64_RAM;
#    TEXT_PDESC:     load = PRG1,    run = C64_RAM;
#
#---------------------------------------------------------------------------
#
#    HUD_COLORSCR:   load = PRG2,    define = yes;
#
#    # the colour-nybbles for the bitmap HUD have to be placed in the colour RAM
#    # which resides outside of the C64's main memory -- colour RAM has to be
#    # banked in over the top of $D800..$DBE7 -- therefore our colour-nybbles
#    # must be stored somewhere temporary and written into colour RAM during
#    # game initialisation
#    HUD_COLORRAM:   load = PRG2,    define = yes;
#
#    #---------------------------------------------------------------------------
#
#    GFX_SPRITES:    load = PRG3,     align_load = 64
#                    run  = C64_RAM,  align      = 64,   define = yes;
#
#    # lookup tables for fast multiplication,
#    # consisting of two 512-entry tables of 16-bit numbers
#    TABLE_SQR:      load = PRG3,    align_load = 256,   optional = yes,
#                    run  = C64_RAM, align      = 256,   define   = yes;
#                    
#    MATH_LOGS:      load = PRG3,    align_load = 256,
#                    run  = C64_RAM, align      = 256;
#
#    # for elite-harmless, this table is trimmed from 256 bytes down to 200.
#    # whilst it doesn't have to be aligned, it is used very often and alignment
#    # saves cycles. due to the now-shorter length, we want to place it where
#    # it begins aligned, but is followed by something un-aligned, such as code
#    TABLE_BITMAP_LO:load = PRG3,    run = C64_RAM;
#    
#    CODE_6A00:      load = PRG3,    run = C64_RAM;
#
#    DATA_9900:      load = PRG3,    run = C64_RAM;
#    
#    # note that the sound code relies heavily on page-boundaries even though
#    # the original game didn't align it -- it worked by happenstance!
#    CODE_SOUND:     load = PRG3,    align_load = 256,
#                    run  = C64_RAM, align      = 256;
#    DATA_SOUND:     load = PRG3,    run  = C64_RAM;
#
#    TABLE_BITMAP_HI:load = PRG3,    run = C64_RAM;
#
#    HULL_TABLE:     load = PRG3,    run  = C64_RAM;
#    HULL_TYPE:      load = PRG3,    run  = C64_RAM;
#    HULL_KILL_LO:   load = PRG3,    run  = C64_RAM;
#    HULL_KILL_HI:   load = PRG3,    run  = C64_RAM;
#    HULL_DATA:      load = PRG3,    run  = C64_RAM;
#    HUD_COPY:       load = PRG3,    run  = C64_RAM, define = yes;
#
#    # the runtime storage for ships in-play; since this is variable space
#    # and not part of the on-disk code / data, its type is "bss" which
#    # exlcudes it from being written to disk
#    SHIPS:          type = bss,
#                    load = C64_RAM;
}