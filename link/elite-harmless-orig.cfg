# Elite C64 disassembly / Elite : Harmless, cc-by-nc-sa 2018-2022
# see LICENSE.txt. "Elite" is copyright / trademark David Braben & Ian Bell,
# All Rights Reserved. <github.com/Kroc/elite-harmless>
#===============================================================================

# this file configures the memory layout of Elite : Harmless for 1541 disk.
# once compiled, the whole program is compressed using Exomizer:
# <https://bitbucket.org/magli143/exomizer/wiki/Home>
#
# this is a memory layout that mimics the original game,
# intended to provide a relatively stable version of the build

SYMBOLS {
    ELITE_BITMAP_ADDR:      type = export,  value = __VIC_BITMAP_RUN__;
    ELITE_MENUSCR_ADDR:     type = export,  value = __VIC_SCR_MENU_RUN__;
    ELITE_MAINSCR_ADDR:     type = export,  value = __VIC_SCR_MAIN_RUN__;
    ELITE_SPRITES_ADDR:     type = export,  value = __GFX_SPRITES_RUN__;
    ELITE_FONT_ADDR:        type = export,  value = __GFX_FONT_RUN__;
    ELITE_ZP_SHADOW:        type = export,  value = __ZP_SHADOW_RUN__;
    ELITE_DISK_BUFFER:      type = export,  value = __DISK_BUFFER_RUN__;
    ELITE_HEAP_TOP:         type = export,  value = __HEAP_START__
                                                  + __HEAP_SIZE__;
}

MEMORY {
    # the standard C64 PRG header, the load address;
    # this segment is populated by "c64/prgheader.asm"
    PRGHEADER:  file  = "%O",
                start = %S - 2, size = $0002;

    # the once-off initialisation code+data resides at the beginning of the
    # program but occupies space which is erased and reused by the game,
    # therefore the game must reserve the same amount of space as `INIT`.
    # the remaining `INIT` region is filled with `nop`s so that the game
    # code+data that follows is assigned the expected address
    INIT:       file  = "%O",   fill = yes, fillval = $EA,
                start = %S,     size = $0700 - %S;

    # this is reserved space for the game that is temporarily occupied by the
    # initialisation code+data and therefore not written to the PRG file
    VARS:       file  = "",
                start = $0400,  size = $0700 - $0400;

    # the rest of the game follows;
    # it must not overflow into the hardware vectors at $FFFA-$FFFF
    CODE:       file  = "%O",   fill = yes,
                start = $0700,  size  = $F900 - $0700;

    # the colour nybbles that are copied into colour RAM during
    # intialisation won't fit into the variable space, so we place
    # it in the heap space instead which requires this overlap
    TEMP:       file = "%O",
                start = $F900,  size = $FFFA - $F900;

    # the space after the end of the code is used as a double-ended heap.
    # the data for each instance of ship in play begins at the bottom,
    # and the queue of lines to draw works from the top down
    HEAP:       file = "",
                start = $F900,  size = $FFFA - $F900,   define = yes;
}

SEGMENTS {
    # once-off intialisation:
    #---------------------------------------------------------------------------
    # the program begins with once-off initialisation code that prepares the
    # C64 for the game and uploads the bitmap colour into the colour RAM which
    # resides ouside of the C64's regular RAM and so can't be stored in the PRG
    # "in-place" like we do with the bitmap graphics
    #
    # when the once-off initialisation has completed the space it occupies
    # is erased and re-used by the main game, therefore this linker config
    # must reserve the same amount of space for the game with an overlap
    #
    PRGHEADER:      load = PRGHEADER;
    CODE_INIT:      load = INIT;

    #---------------------------------------------------------------------------

    # working variable space (not written to disk)
    VARS_MAIN:      type = bss,
                    load = VARS,    define = yes;

    #---------------------------------------------------------------------------
    # this is the order of segments from the original code

    TEXT_FLIGHT:    load = CODE;
    TABLE_SIN:      load = CODE;
    GFX_FONT:       load = CODE,    align = 256,        define = yes;
    TEXT_DOCKED:    load = CODE,    define = yes;
    VARS_FLAGS:     load = CODE;
    CODE_1D81:      load = CODE;
    MAIN_FLIGHT:    load = CODE;
    CODE_2372:      load = CODE;
    TEXT_TOKENS:    load = CODE;
    TEXT_PAIRS:     load = CODE;
    SAVE_DATA:      load = CODE,    define = yes;
    SAVE_DEFAULT:   load = CODE;

    # when drawing circles, the X & Y points are queued up here for drawing
    # lines in batches. in the original game, this area is full of junk data
    # and stored as part of the PRG-file. in elite-harmless we make it a
    # reserved chunk of RAM without including in the disk-file
    CIRCLE_LINES:   type = bss,
                    load = CODE;

    SHIP_ADDRS:     load = CODE;
    CODE_28BA:      load = CODE;
    CODE_2977:      load = CODE;
    CODE_2A12:      load = CODE;
    CODE_3986:      load = CODE;
    CODE_39E0:      load = CODE;
    CODE_3A48:      load = CODE;
    CODE_3AB2:      load = CODE;
    CODE_3BC1:      load = CODE;
    TEXT_PDESC:     load = CODE;

    #---------------------------------------------------------------------------
    # the source code will use the address assigned by this segment
    # placement, it's not defined anywhere in the source code!
    #
    VIC_BITMAP:     load = CODE,    align = $2000,      define = yes;

    # elite uses two 'text' screens (although they hold colour information
    # when used with the bitmap), one for the "main view" (cockpit) and
    # another for the "menu view", the menu screens that hide the HUD
    VIC_SCR_MENU:   load = CODE,    align = $0400,      define = yes;
    VIC_SCR_MAIN:   load = CODE,    align = $0400,      define = yes;

    # sprite data *MUST* exist within the VIC-II bank! for a VIC-II bank of
    # $4000, the sprite data must end no later than $8000! this is why this
    # segment must be placed early here
    GFX_SPRITES:    load = CODE,    align = 64,         define = yes;

    #---------------------------------------------------------------------------
    CODE_6A00:      load = CODE;
    CODE_6A2F:      load = CODE;
    CODE_74B8:      load = CODE;
    CODE_8273:      load = CODE;
    CODE_828F:      load = CODE;
    MATH_LOGS:      load = CODE,    align = 256;

    # for elite-harmless, this table is trimmed from 256 bytes down to 200.
    # whilst it doesn't have to be aligned, it is used very often and alignment
    # saves cycles. due to the now-shorter length, we want to place it where
    # it begins aligned, but is followed by something un-aligned, such as code
    BITMAP_ADDR_LO: load = CODE;
    BITMAP_ADDR_HI: load = CODE;

    DATA_9900:      load = CODE;
    CODE_9932:      load = CODE;
    CODE_9978:      load = CODE;
    CODE_99AF:      load = CODE;
    CODE_9A0C:      load = CODE;
    CODE_9A83:      load = CODE;
    CODE_A013:      load = CODE;
    CODE_A13F:      load = CODE;
    CODE_A44A:      load = CODE;
    CODE_A4A1:      load = CODE;
    CODE_A508:      load = CODE;
    CODE_IRQS:      load = CODE;
    CODE_LINE:      load = CODE;
    CODE_B09D:      load = CODE;
    CLEAR_SCREEN:   load = CODE;
    CODE_B3D4:      load = CODE;

    # note that the sound code relies heavily on page-boundaries even though
    # the original game didn't align it -- it worked by happenstance!
    CODE_SOUND:     load = CODE,     align = 256,        optional = yes;
    DATA_SOUND:     load = CODE,                         optional = yes;

    # used as a backup of the zero-page during some operations, though I am not
    # yet certain of the specifics. in the original game, this is at $CE00
    ZP_SHADOW:      type = bss,     align = 256,
                    load = CODE,    define = yes;

    DISK_BUFFER:    type = bss,     align = 256,
                    load = CODE,    define = yes;

    HULL_TABLE:     load = CODE;
    HULL_TYPE:      load = CODE;
    HULL_KILL_LO:   load = CODE;
    HULL_KILL_HI:   load = CODE;
    HULL_DATA:      load = CODE;

    HUD_COPY:       load = CODE,    define = yes;

    #---------------------------------------------------------------------------
    # the runtime storage for ships in-play; since this is variable space
    # and not part of the on-disk code / data, its type is "bss" which
    # excludes it from being written to disk
    SHIPS:          type = bss,
                    load = HEAP;
    
    # the colour-nybbles for the bitmap HUD have to be placed in the colour RAM
    # which resides outside of the C64's main memory -- colour RAM has to be
    # banked in over the top of $D800..$DBE7 -- therefore our colour-nybbles
    # must be stored somewhere temporary and written into colour RAM during
    # game initialisation
    #
    GFX_COLORRAM:   load = TEMP;
}