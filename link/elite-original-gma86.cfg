# Elite C64 disassembly / Elite : Harmless, cc-by-nc-sa 2018-2022,
# see LICENSE.txt. "Elite" is copyright / trademark David Braben & Ian Bell,
# All Rights Reserved. <github.com/Kroc/elite-harmless>
#===============================================================================

SYMBOLS {
    ELITE_BITMAP_ADDR:      type = export,  value = __VIC_BITMAP_RUN__;
    ELITE_MENUSCR_ADDR:     type = export,  value = __VIC_SCR_MENU_RUN__;
    ELITE_MAINSCR_ADDR:     type = export,  value = __VIC_SCR_MAIN_RUN__;
    ELITE_SPRITES_ADDR:     type = export,  value = __GFX_SPRITES_RUN__;
    ELITE_FONT_ADDR:        type = export,  value = __GFX_FONT_RUN__;
    ELITE_ZP_SHADOW:        type = export,  value = __ZP_SHADOW_RUN__;
    ELITE_DISK_BUFFER:      type = export,  value = __DISK_BUFFER_RUN__;
    ELITE_HEAP_TOP:         type = export,  value = __HEAP_START__
                                                  + __HEAP_SIZE__;
}

MEMORY {
    # the layout of segments consists of two sets of memory maps; the first,
    # where the code/data goes when the game is running, and an entirely
    # different layout for where that code/data goes in the disk-file 

    # C64 layout:
    #===========================================================================
    # this is only used to assign addresses for run-time,
    # nothing is actually written to disk for this layout
    #
    BASIC:          file  = "",
                    start = $0801,      size = $A000 - $0801;

    LORAM:          file  = "",
                    start = $0400,      size = $4000 - $0400;

    VIC_BANK:       file  = "",
                    start = $4000,      size = $4000;
                    
    HIRAM:          file  = "",
                    start = $6A00,      size = $D000 - $6A00;

    ZP_SHADOW:      file = "",
                    start = $CE00,      size = $0100;

    DISK_BUFFER:    file = "",          
                    start = $CF00,      size = $0100;

    HIDATA:         file  = "",
                    start = $D000,      size = $F900 - $D000;

    # the space after the end of the code is used as a double-ended heap.
    # the data for each instance of ship in play begins at the bottom,
    # and the queue of lines to draw works from the top down
    HEAP:           file = "",          define = yes,
                    fill = yes,
                    start = $F900,      size = $FFC0 - $F900;

    # 1541 disk-drive internal RAM:
    #===========================================================================
    C1541_BUFF0:    file = "",  start = $0300,  size = $4FF;
    C1541_BUFF1:    file = "",  start = $0400,  size = $3FF;
    C1541_BUFF2:    file = "",  start = $0500,  size = $2FF;
    C1541_BUFF3:    file = "",  start = $0600,  size = $1FF;
    C1541_BUFF4:    file = "",  start = $0700,  size = $FF;

    # disk files:
    #===========================================================================
    # FIREBIRD.PRG:
    #---------------------------------------------------------------------------
    FIREBIRD_PRG:   file  = "bin/firebird.prg",
                    start = $02A7 - 2,  size = $0002,           define = yes;
    FIREBIRD:       file  = "bin/firebird.prg",
                    start = $02A7,      size = $030C - $02A7,   define = yes;

    # GMA1.PRG:
    #---------------------------------------------------------------------------
    GMA1_PRG:       file  = "bin/gma1.prg",
                    start = $0334 - 2,  size = $0002,           define = yes;
    GMA1:           file  = "bin/gma1.prg",
                    start = $0334,      size = $0800 - $0334;

    # BYEBYEJULIE.PRG: ('GMA2.PRG')
    #---------------------------------------------------------------------------
    GMA2_PRG:       file  = "bin/byebyejulie.prg",
                    start = $0801 - 2,  size = $0002,           define = yes;
    GMA2:           file  = "bin/byebyejulie.prg",
                    start = $0801,      size = $A000 - $0801;

    # GMA3.PRG:
    #---------------------------------------------------------------------------
    GMA3_PRG:       file  = "bin/gma3.prg",
                    start = $C800 - 2,  size = $0002,           define = yes;
    GMA3:           file  = "bin/gma3.prg",
                    start = $C800,      size = $D000 - $C800;

    # GMA4.PRG:
    #---------------------------------------------------------------------------
    #
    # $4000 +---------+
    #       | DATA1A  |     TEXT_FLIGHT     ("text/text_flight.asm")
    #       |         |     TABLE_SIN       ("math/math_data.asm")
    #       |         |     GFX_FONT        ("gfx/gfx_font.asm")
    #       |         |     TEXT_DOCKED     ("text/text_docked.asm")
    # $5600 |- - - - -|
    #       | DATA1B  |     HULL_*          ("hulls/data_hulls.asm")
    # $7593 +---------+
    #       | CODE    |     decryption routine
    # $75E4 +---------+               
    #       | DATA2   |     CODE_INIT       ("orig_init.asm")
    #       |         |     HUD_SCRCOLOR    ("gfx/gfx_bitmap.asm")
    #       |         |     GFX_COLORRAM    ("gfx/gfx_bitmap.asm")
    #       |         |     GFX_SPRITES     ("gfx/gfx_sprites.asm")
    #       |         |     DATA_7C3A       ("boot/gma/stage4_7C3A.asm")
    #       |         |     HUD_COPY        ("gfx/gfx_bitmap.asm")
    # $8660 +---------+
    #
    GMA4_PRG:       file  = "build/gma4_prg.bin",
                    start = $4000 - 2,  size = $0002,           define = yes;

    GMA4_DATA1A:    file  = "build/gma4_data1.bin",
                    start = $4000,      size = $D000 - $4000,   define = yes;

    GMA4_DATA1B:    file  = "build/gma4_data1.bin",
                    start = __GMA4_DATA1A_LAST__,
                    size  = $D000 - __GMA4_DATA1A_LAST__,       define = yes;

    GMA4_JUNK1:     file  = "build/gma4_junk1.bin",
                    start = __GMA4_DATA1B_LAST__,
                    size  = $D000 - __GMA4_DATA1B_LAST__,       define = yes;

    GMA4_CODE:      file  = "build/gma4_code.bin",
                    start = __GMA4_JUNK1_LAST__,
                    size  = $D000 - __GMA4_JUNK1_LAST__,        define = yes;

    GMA4_DATA2:     file  = "build/gma4_data2.bin",
                    start = __GMA4_CODE_LAST__,
                    size  = $D000 - __GMA4_CODE_LAST__,         define = yes;

    GMA4_JUNK2:     file  = "build/gma4_junk2.bin",
                    start = __GMA4_DATA2_LAST__,
                    size  = $D000 - __GMA4_DATA2_LAST__;

    # GMA5.PRG:
    #---------------------------------------------------------------------------
    #
    # $1D00 +--------+
    #       |  VARS  |      user-preferences variable space used by Elite
    # $1D22 +--------+
    #       |  CODE  |      stage 5 decryption routine
    # $1D81 +--------+
    #       |        |
    #       |  DATA  |      encrypted payload
    #       |        |
    # $3ED5 +--------+

    GMA5_PRG:       file  = "build/gma5_code.prg",
                    start = $1D00 - 2,  size = $0002,           define = yes;

    # unencrypted stuff; this includes the unrelated variable
    # area at $1D00..$1D22 that's bundled in GMA5.PRG
    GMA5_CODE:      file  = "build/gma5_code.prg",
                    start = $1D00,      size = $4000 - $1D00,   define = yes;

    # the to-be encrypted area
    GMA5_DATA:      file  = "build/gma5_data.bin",
                    start = __GMA5_CODE_LAST__,
                    size  = $4000 - __GMA5_CODE_LAST__,         define = yes;
    
    # some trailing junk bytes *not* part of the encrypted area
    GMA5_JUNK:      file  = "build/gma5_junk.bin",
                    start = __GMA5_DATA_LAST__,
                    size  = $4000 - __GMA5_DATA_LAST__;

    # GMA6.PRG:
    #---------------------------------------------------------------------------

    GMA6_PRG:       file  = "build/gma6_prg.bin",
                    start = $6A00 - 2,  size = $0002,           define = yes;

    # the to-be encrypted area
    GMA6_DATA:      file  = "build/gma6_data.bin",
                    start = $6A00,      size = $D000 - $6A00,   define = yes;

    # some trailing junk bytes *not* part of the encrypted area
    GMA6_JUNK:      file  = "build/gma6_junk.bin",
                    start = __GMA6_DATA_LAST__,
                    size  = $D000 - __GMA6_DATA_LAST__;
}
SEGMENTS {
    
    VARS_MAIN:      load = LORAM,       type = bss,     define = yes;
    ZP_SHADOW:      load = ZP_SHADOW,   type = bss,     define = yes;
    DISK_BUFFER:    load = DISK_BUFFER, type = bss,     define = yes;

    #---------------------------------------------------------------------------
    # the bitmap can be placed in either the lower or upper half of the VIC
    # bank (it's 8K) and the character set can be placed at any 2 K offset.
    
    # the source code will use the address assigned by this segment placement,
    # it's not defined anywhere in the source code!
    VIC_BITMAP:     type = bss, load = VIC_BANK, align = $2000,  define = yes;
    
    # elite uses two 'text' screens (although they hold colour information
    # when used with the bitmap), one for the "main view" (cockpit) and
    # another for the "menu view", the menu screens that hide the HUD
    VIC_SCR_MENU:   type = bss, load = VIC_BANK, align = $0400,  define = yes;
    VIC_SCR_MAIN:   type = bss, load = VIC_BANK, align = $0400,  define = yes;
    
    # loader stage 0: (FIREBIRD.PRG)
    #---------------------------------------------------------------------------

    HEAD_STAGE0:    load = FIREBIRD_PRG;
    # the BASIC bootstrap is placed first in case the program is loaded into
    # $0801 instead of the the intended load address $02A7
    BASIC_STAGE0:   load = FIREBIRD,    run = BASIC,    define = yes;
    # this is the intended code of FIREBIRD.PRG,
    # its only purpose is to load GMA1.PRG and start that
    CODE_STAGE0:    load = FIREBIRD;
    # place the BASIC vectors at the right place regardless of other code
    BASIC_VECTORS:  load = FIREBIRD,    start = $0300;

    # loader stage 1: (GMA1.PRG)
    #---------------------------------------------------------------------------
    # this program asks if the user wants the fast or slow loader, loads
    # GMA3.PRG for the copy-protection check and then loads in GMA4.PRG,
    # GMA5.PRG & GMA6.PRG
    
    HEAD_STAGE1:    load = GMA1_PRG;
    CODE_STAGE1A:   load = GMA1,                        define = yes;
    CODE_1541:      load = GMA1,    run = C1541_BUFF0,  define = yes;
    CODE_STAGE1B:   load = GMA1;

    # loader stage 2: (BYEBYEJULIE.PRG)
    #---------------------------------------------------------------------------
    # this program is unused and empty!

    HEAD_STAGE2:    load = GMA2_PRG;
    CODE_STAGE2:    load = GMA2;

    # loader stage 3: (GMA3.PRG)
    #---------------------------------------------------------------------------

    HEAD_STAGE3:    load = GMA3_PRG;
    CODE_STAGE3:    load = GMA3;

    # loader stage 6: (GMA6.PRG)
    #---------------------------------------------------------------------------
    # this memory needs to be assigned before loader stage 4, as some data
    # packed into GMA4.PRG's encrypted blocks gets relocated into high-RAM
    # following GMA6.PRG's contents
    #
    # $6A00 +--------+
    #       |        |
    #       |        |
    #       |  CODE  |
    #       |        |
    #       |        |
    # $B70E |--------|
    #       |        |
    #       |  DATA  |
    #       |        |
    # $CCD7 +--------+
    #
    # GMA6.PRG is entirely encrypted besides a few unused junk bytes at the
    # end. it doesn't have its own decryption routine, GMA5.PRG does this
    
    HEAD_STAGE6:    load = GMA6_PRG;

    CODE_6A00:      load = GMA6_DATA,   run = HIRAM;
    CODE_74B8:      load = GMA6_DATA,   run = HIRAM;
    CODE_8273:      load = GMA6_DATA,   run = HIRAM;
    CODE_828F:      load = GMA6_DATA,   run = HIRAM;
    MATH_LOGS:      load = GMA6_DATA,   run = HIRAM,    align = 256;
    BITMAP_ADDR_LO: load = GMA6_DATA,   run = HIRAM,    align = 256;
    BITMAP_ADDR_HI: load = GMA6_DATA,   run = HIRAM,    align = 256;
    DATA_9900:      load = GMA6_DATA,   run = HIRAM,    align = 256;
    CODE_9932:      load = GMA6_DATA,   run = HIRAM;
    CODE_9978:      load = GMA6_DATA,   run = HIRAM;
    CODE_99AF:      load = GMA6_DATA,   run = HIRAM;
    CODE_IRQS:      load = GMA6_DATA,   run = HIRAM;
    CODE_LINE:      load = GMA6_DATA,   run = HIRAM;
    CODE_B09D:      load = GMA6_DATA,   run = HIRAM;
    CLEAR_SCREEN:   load = GMA6_DATA,   run = HIRAM;
    CODE_B3D4:      load = GMA6_DATA,   run = HIRAM;
    CODE_SOUND:     load = GMA6_DATA,   run = HIRAM;
    DATA_SOUND:     load = GMA6_DATA,   run = HIRAM;
    GMA6_JUNK:      load = GMA6_JUNK,   run = HIRAM;

    # loader stage 4: (GMA4.PRG)
    #---------------------------------------------------------------------------
    # the stage-4 loader consists of two large blocks of scrambled code/data
    # with the decryption routine wedged between:
    #
    # $4000 +---------+
    #       | DATA1A  |     TEXT_FLIGHT     ("text/text_flight.asm")
    #       |         |     TABLE_SIN       ("math_data.asm")
    #       |         |     GFX_FONT        ("gfx/gfx_font.asm")
    #       |         |     TEXT_DOCKED     ("text/text_docked.asm")
    # $5600 |- - - - -|
    #       | DATA1B  |     HULL_*          ("hulls/data_hulls.asm")
    # $7593 +---------+
    #       | CODE    |     decryption routine
    # $75E4 +---------+               
    #       | DATA2   |     CODE_INIT       ("orig_init.asm")
    #       |         |     HUD_SCRCOLOR    ("gfx/gfx_bitmap.asm")
    #       |         |     GFX_COLORRAM    ("gfx/gfx_bitmap.asm")
    #       |         |     GFX_SPRITES     ("gfx/gfx_sprites.asm")
    #       |         |     DATA_7C3A       ("boot/gma4_7C3A.asm")
    #       |         |     HUD_COPY        ("gfx/gfx_bitmap.asm")
    # $8660 +---------+

    # .PRG header, load address
    HEAD_STAGE4:    load = GMA4_PRG;

    # GMA4's 1st encrypted data block consists of this data set
    # (part A:)
    TEXT_FLIGHT:    load = GMA4_DATA1A, run = LORAM,    define = yes;
    TABLE_SIN:      load = GMA4_DATA1A, run = LORAM;
    GFX_FONT:       load = GMA4_DATA1A, run = LORAM,    define = yes,
              align_load = 1,   align = 256;
    TEXT_DOCKED:    load = GMA4_DATA1A, run = LORAM;
    
    # (part B:)
    HULL_TABLE:     load = GMA4_DATA1B, run = HIDATA,   define = yes;
    HULL_TYPE:      load = GMA4_DATA1B, run = HIDATA;
    HULL_KILL_LO:   load = GMA4_DATA1B, run = HIDATA;
    HULL_KILL_HI:   load = GMA4_DATA1B, run = HIDATA;
    HULL_DATA:      load = GMA4_DATA1B, run = HIDATA;

    # following the encrypted block, there a few unused junk bytes
    GMA4_JUNK1:     load = GMA4_JUNK1;

    # this is the decryption routine
    CODE_STAGE4:    load = GMA4_CODE;

    # GMA4's 2nd encrypted data block consits of this data set
    CODE_INIT:      load = GMA4_DATA2,                      define = yes;
    HUD_COLORSCR:   load = GMA4_DATA2,                      define = yes;
    GFX_COLORRAM:   load = GMA4_DATA2,                      define = yes;
    GFX_SPRITES:    load = GMA4_DATA2,  run = VIC_BANK,     define = yes;
    DATA_7C3A:      load = GMA4_DATA2,                      define = yes;
    HUD_COPY:       load = GMA4_DATA2,  run = HIDATA,       define = yes;

    # following the encrypted block, there a few unused junk bytes
    GMA4_JUNK2:     load = GMA4_JUNK2;
    
    # loader stage 5: (GMA5.PRG)
    #---------------------------------------------------------------------------
    HEAD_STAGE5:    load = GMA5_PRG;
    VARS_FLAGS:     load = GMA5_CODE,   run = LORAM;
    CODE_GMA5:      load = GMA5_CODE,   run = LORAM;
    CODE_1D81:      load = GMA5_DATA,   run = LORAM;
    ORIG_1E14:      load = GMA5_DATA,   run = LORAM;
    MAIN_FLIGHT:    load = GMA5_DATA,   run = LORAM;
    CODE_2372:      load = GMA5_DATA,   run = LORAM;
    TEXT_TOKENS:    load = GMA5_DATA,   run = LORAM;
    TEXT_PAIRS:     load = GMA5_DATA,   run = LORAM;
    SAVE_DATA:      load = GMA5_DATA,   run = LORAM, define = yes;
    SAVE_DEFAULT:   load = GMA5_DATA,   run = LORAM;
    LINE_DATA:      load = GMA5_DATA,   run = LORAM;
    SHIP_ADDRS:     load = GMA5_DATA,   run = LORAM;
    CODE_28BA:      load = GMA5_DATA,   run = LORAM;
    CODE_3986:      load = GMA5_DATA,   run = LORAM;
    CODE_39E0:      load = GMA5_DATA,   run = LORAM;
    TEXT_PDESC:     load = GMA5_DATA,   run = LORAM;
    JUNK_GMA5:      load = GMA5_JUNK,   run = LORAM;

    #---------------------------------------------------------------------------
    # the runtime storage for poly-objects (ships, asteroids, etc) in-play;
    # since this is variable space and not part of the on-disk code / data,
    # its type is "bss" which exlcudes it from being written to disk
    POLYOBJS:       load = HEAP,        type = bss,     align = $100;
}